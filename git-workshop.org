#+REVEAL_TRANS: linear
#+REVEAL_PLUGINS: (highlight)
#+OPTIONS: num:nil toc:nil
#+Title: A hands-on introduction to Git

* Pre-installation
** Mac users
   - Open a terminal window.
   - Visit [[https://brew.sh/]]. Copy and paste the command there into your terminal.
** If you don't already have a favourite text editor
   - Visit [[https://atom.io/]] to download and install Atom.

* What is Git?
  - A version-control system set up to record /annotated/ changes to your files.
  - Especially suitable for text files such as LaTeX and other code.
  - Currently one of the most popular and supported such systems.

* Why use Git when we have Dropbox?
   #+ATTR_HTML: :height 550px
   #+ATTR_REVEAL: :frag roll-in
   [[./images/final.gif]]
** Git has better revision history
   - Clearly see who changed what when.
   - Active control over saving revisions: avoid accidents!
   - Excellent support for parallel universes.
   - Entire history saved on the local copy.
** Git is optimised for collaboration
   - No more conflicted copies! Edit whenever you like.
   - Smooth and transparent merges.
   - Fast synchronisation.

* Installation and basic setup
** Installation
   - Mac users: run the following in your terminal.
     #+BEGIN_SRC shell session
     $ brew install git
     #+END_SRC
   - Windows users: visit [[https://gitforwindows.org/]] and download.
   - Linux users: install from your package manager.

** First steps
   - Open a terminal window and check that git installed correctly.
     #+BEGIN_SRC shell session
     $ git --version
     #+END_SRC
   - You can get help at any time with these commands.
     #+BEGIN_SRC shell session
     $ git help
     $ man git
     $ man git-[subcommand]
     #+END_SRC
   - The official Git website is a fantastic resource: [[https://git-scm.com]].

** Initial setup
   - Let's see what the current configuration is.
     #+BEGIN_SRC shell session
     $ git config --list
     #+END_SRC
   - Set up your identity.
     #+BEGIN_SRC shell session
     $ git config --global user.name "[Your Name]"
     $ git config --global user.email "[Your Email]"
     #+END_SRC
   - Optionally set up some extras.
     #+BEGIN_SRC shell session
     $ git config --global core.editor "atom --wait"
     $ git config --global color.ui auto
     #+END_SRC

** Basic terminal glossary
   |-----------+------------------------------------|
   | /         | <                                  |
   | ~~~       | Home directory                     |
   | ~cd x~    | Change directory to ~x~            |
   | ~ls~      | List contents of current directory |
   | ~cp x y~  | Copy file ~x~ to file ~y~          |
   | ~mv x y~  | Move/rename file ~x~ to file ~y~   |
   | ~mkdir x~ | Create directory ~x~               |
   | ~pwd~     | Show current path                  |

* Let's start a project!
** Make the repository
   - Create a directory containing a new Git repository.
     #+BEGIN_SRC shell session
     $ cd ~
     $ git init testproject
     #+END_SRC
   - Or, turn an existing directory into a Git repository.
     #+BEGIN_SRC shell session
     $ cd [desired-directory]
     $ git init
     #+END_SRC
   - Go into this directory, and have a look around.
     #+BEGIN_SRC shell session
     $ cd testproject
     $ ls -a
     $ ls .git
     $ git status
     $ git log
     #+END_SRC

** Some notation
   - Working directory :: The directory containing your project files.
   - (Local) Git repository :: The ~.git~ directory inside your working directory.
   - Staging area :: What you've told Git to add to the next revision.
   - Commit :: The act of recording the staging area as a new revision.

* Your first commit
** Make the changes
   - Write a dummy LaTeX file of your choice, save, and compile.
   - See what Git says.
     #+BEGIN_SRC shell session
     $ git status
     #+END_SRC

** Ignore unnecessary files
   - Visit [[https://github.com/asilata/.dotfiles]] and save the raw version of the ~gitignore_global~ file. 
   - Move it to the correct location.
     #+BEGIN_SRC shell session
     $ mv ~/Downloads/gitignore_global ~/.gitignore_global
     #+END_SRC
   - Now see what git says.
     #+BEGIN_SRC shell session
     $ cd ~/testproject
     $ git status
     #+END_SRC

** Stage and commit your changes     
   - Add your new file to the staging area. Then commit.
     #+BEGIN_SRC shell session
     $ git add [name-of-your-latex-file]
     $ git status
     $ git commit -m "[short descriptive message]"
     #+END_SRC
   - Have a look at what happened.
     #+BEGIN_SRC shell session
     $ git status
     $ git log
     #+END_SRC

** Fixing mistakes
   - Stage some more changes. To "unstage" them, do a reset.
     #+BEGIN_SRC shell session
     $ git reset 
     #+END_SRC
   - To throw away any uncommitted changes, do a hard reset. Tread carefully!
     #+BEGIN_SRC shell session
     $ git reset --hard
     #+END_SRC
   - Now stage and commit some more changes.

** Going back in time
   - You can also recover any of the older, committed versions of your files.
   - To do this, you can "check out" a file from an older commit.
     #+BEGIN_SRC shell session
     $ git checkout [commit] [filename]
     #+END_SRC
   - To throw away the changes you (re-)introduced, do a hard reset again.
     
* Working with remotes
- Remote (repository) :: An external Git repository that your local repository connects to and syncs with.

Typically, you host a remote on a central hub such as [[https://github.com/][GitHub]], [[https://bitbucket.org/][BitBucket]], or [[https://gitlab.com/][GitLab]].
Then you and any other collaborators you added can /clone/ this remote to your local machines.

** Connecting to GitHub
   - Head over to [[https://github.com/]] and create a new account.
   - We'll follow the instructions at [[https://help.github.com/articles/connecting-to-github-with-ssh/]].
   - Windows users: follow the instructions at ?? to start your ~ssh-agent~ automatically when you start Git Bash.

** Setting up ssh
   - Check for existing ssh keys.
     #+BEGIN_SRC shell session
     $ ls -al ~/.ssh
     #+END_SRC
   - If you don't see any, generate a new one first.
     #+BEGIN_SRC shell session
     $ ssh-keygen -t rsa -b 4096 -C "[your email]"
     #+END_SRC
   - Save it in the default location suggested, and then enter a passphrase if you want one.
   - Add your key to the ~ssh-agent~.
     #+BEGIN_SRC shell session
     $ ssh-add ~/.ssh/id_rsa
     #+END_SRC

** Connecting to GitHub with ssh
   - Copy the contents of ~~/.ssh/id_rsa.pub~ to GitHub.
